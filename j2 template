# Log cleanup and rotation script for {{ job_name }}
# Leader PIC: {{ leader_PIC }}
# Time to run: {{ time_to_run }}
# Host: {{ ansible_host }}

# Paths to the log manager and rotation scripts
$logManagerScript = "{{ path_job }}\\windows-log-manager.ps1"
$logRotationScript = "{{ path_job }}\\log-rotation.ps1"

# Ensure the log manager scripts exist
if (-not (Test-Path -Path $logManagerScript)) {
    Write-Host "Error: Log manager script not found at $logManagerScript"
    Exit 1
}

if (-not (Test-Path -Path $logRotationScript)) {
    Write-Host "Error: Log rotation script not found at $logRotationScript"
    Exit 1
}

{% for service in service %}
# Service: {{ service.name }}
# Path: {{ service.path }}
{% if service.retention_rate is defined %}
# Retention rate: {{ service.retention_rate }} days
{% endif %}
{% if service.log_extension is defined %}
# Log Extension: {{ service.log_extension }}
{% endif %}
{% if service.backup %}
# Backup Enabled: Yes
# Backup Retention Rate: {{ service.backup_retention_rate }} days
{% if service.backup_path is defined %}
# Backup Path: {{ service.backup_path }}
{% else %}
# Backup Path: {{ service.path }}\\backup
{% endif %}
{% endif %}
# Clean Type: {{ service.clean_type }}

{% if service.clean_type == 'retention' %}
# Call the windows-log-manager script for {{ service.name }}
powershell -ExecutionPolicy Bypass -File $logManagerScript `
    -ServiceName "{{ service.name }}" `
    -LogPath "{{ service.path }}" `
    {% if service.retention_rate is defined %} -RetentionDays {{ service.retention_rate }} {% endif %} `
    {% if service.log_extension is defined %} -LogExtension "{{ service.log_extension }}" {% endif %} `
    {% if service.backup %} -BackupEnabled $true {% endif %} `
    {% if service.backup_retention_rate is defined %} -BackupRetentionDays {{ service.backup_retention_rate }} {% endif %} `
    {% if service.backup_path is defined %} -BackupPath "{{ service.backup_path }}" {% endif %}

if ($LASTEXITCODE -ne 0) {
    Write-Host "Error: Log cleanup (retention) failed for {{ service.name }}"
} else {
    Write-Host "Log cleanup (retention) succeeded for {{ service.name }}"
}

{% elif service.clean_type == 'rotation' %}
# Call the log-rotation script for {{ service.name }}
powershell -ExecutionPolicy Bypass -File $logRotationScript `
    -ServiceName "{{ service.name }}" `
    -LogPath "{{ service.path }}" `
    {% if service.log_extension is defined %} -LogExtension "{{ service.log_extension }}" {% endif %}

if ($LASTEXITCODE -ne 0) {
    Write-Host "Error: Log rotation failed for {{ service.name }}"
} else {
    Write-Host "Log rotation succeeded for {{ service.name }}"
}

{% endif %}
{% endfor %}

Write-Host "Log cleanup and rotation tasks completed for {{ job_name }} on {{ ansible_host }}"

#!/bin/bash

# Nexus repository configuration
NEXUS_URL="http://nexus.example.com/repository/repo-name"
NEXUS_USERNAME="your-username"
NEXUS_PASSWORD="your-password"

# The file to be uploaded
FILE_PATH="path/to/your-file.txt"
FILE_NAME=$(basename "$FILE_PATH")

# Function to log error messages
log_error() {
    echo "[ERROR] $1"
}

# Function to upload the file
upload_file() {
    echo "Attempting to upload $FILE_NAME to Nexus..."

    # Try uploading the file using curl
    response=$(curl -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" \
        --upload-file "$FILE_PATH" \
        "$NEXUS_URL/$FILE_NAME" -w "%{http_code}" -o /dev/null -s)

    # Check if the response indicates success (200 or 201)
    if [[ "$response" == "200" || "$response" == "201" ]]; then
        echo "File $FILE_NAME successfully uploaded to Nexus."
    else
        # If the upload fails, log an error and return failure status
        log_error "Failed to upload $FILE_NAME. HTTP Status: $response"
        return 1
    fi
}

# Try-catch equivalent in Bash
if upload_file; then
    echo "Operation completed successfully."
else
    echo "Operation failed. Please check the logs for more details."
    exit 1
fi

echo "This will not add a new line." | sed ':a;N;$!ba;s/\n//g'

