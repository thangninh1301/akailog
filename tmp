pipeline {
    agent {
        kubernetes {
            label 'ansible-python-pod'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: ansible-python-pod
spec:
  containers:
  - name: ansible
    image: ansible/ansible-runner
    command:
    - cat
    tty: true
  - name: python
    image: python:3.9
    command:
    - cat
    tty: true
"""
        }
    }
    environment {
        // Define the dynamic path to the inventory folder within the workspace
        INVENTORY_PATH = "${env.WORKSPACE}/inventory"
    }

    // Define parameters upfront using properties
    properties([
        choice(
            name: 'INVENTORY_FILE',
            choices: getInventoryFiles(),
            description: 'Select inventory file'
        ),
        choice(
            name: 'MODE',
            choices: ['Run Python Script', 'Run Ansible Playbook', 'Echo HelloWorld'],
            description: 'Select the mode to run'
        )
    ])

    stages {
        stage('Run Task Based on Mode') {
            steps {
                container('ansible') {
                    script {
                        if (params.MODE == 'Run Python Script') {
                            container('python') {
                                echo "Running Python Script"
                                sh 'python3 /path/to/your/python_script.py'
                            }
                        } else if (params.MODE == 'Run Ansible Playbook') {
                            echo "Running Ansible Playbook with inventory: ${params.INVENTORY_FILE}"
                            // Use ansible-playbook inside the Ansible container
                            sh "ansible-playbook /path/to/your/ansible/playbook.yml -i ${INVENTORY_PATH}/${params.INVENTORY_FILE}"
                        } else if (params.MODE == 'Echo HelloWorld') {
                            echo "HelloWorld"
                        }
                    }
                }
            }
        }
    }
}

// Helper function to get all inventory files from the dynamically referenced inventory folder
def getInventoryFiles() {
    def inventoryFiles = []
    def files = new File("${env.WORKSPACE}/inventory").listFiles()
    files.each { file ->
        if (file.isFile()) {
            inventoryFiles << file.getName()
        }
    }
    return inventoryFiles.join('\n')
}
